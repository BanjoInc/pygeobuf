option optimize_for = LITE_RUNTIME;

message Data {

    oneof data_type {
        FeatureCollection feature_collection = 1;
        Feature feature = 2;
        Geometry geometry = 3;
    }

    // global arrays of unique keys & values
    repeated string keys = 4;
    repeated Value values = 5;

    optional uint32 dimensions = 6 [default = 2];

    // number of digits after decimal point for coordinates
    optional uint32 precision = 7 [default = 6];


    message Feature {
        required Geometry geometry = 1;

        // pairs of key/value indexes
        repeated uint32 properties = 2 [packed = true];

        oneof id_type {
            string id = 3;
            uint32 uint_id = 4;
        }
    }

    message Geometry {
        required Type type = 1;

        oneof coord_type {
            LineString line_string = 2; // Point, MultiPoint, LineString
            MultiLineString multi_line_string = 3; // Polygon, MultiLineString
            MultiPolygon multi_polygon = 4; // MultiPolygon
            GeometryCollection geometry_collection = 5; // GeometryCollection
        }
    }

    message FeatureCollection {
        repeated Feature features = 1;
    }
    message GeometryCollection {
        repeated Geometry geometries = 1;
    }

    message LineString {
        // delta-encoded integer values
        repeated sint32 coords = 1 [packed = true];
    }
    message MultiLineString {
        repeated LineString line_strings = 1;
    }
    message MultiPolygon {
        repeated MultiLineString polygons = 1;
    }

    enum Type {
        POINT = 0;
        MULTIPOINT = 1;
        LINESTRING = 2;
        MULTILINESTRING = 3;
        POLYGON = 4;
        MULTIPOLYGON = 5;
        GEOMETRYCOLLECTION = 6;
    }

    message Value {
        oneof value_type {
            string string_value = 1;
            float float_value = 2;
            double double_value = 3;
            sint32 int_value = 4;
            uint32 uint_value = 5;
            bool bool_value = 6;
            string json_value = 7;
        }
    }
}
